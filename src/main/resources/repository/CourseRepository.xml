<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mdd.ela.repository.CourseRepository">
    <resultMap id="course" type="com.mdd.ela.model.entity.Course">
        <result column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="author_account_id" property="authorAccountId"/>
        <result column="description" property="description"/>
        <result column="avatar_url" property="avatarUrl"/>
        <result column="root_price" property="rootPrice"/>
        <result column="active" property="active"/>
        <result column="type" property="type"/>
        <result column="category_id" property="categoryId"/>

        <result column="create_time" property="createTime"/>
        <result column="create_user_id" property="createUserId"/>
        <result column="modify_time" property="modifyTime"/>
        <result column="modify_user_id" property="modifyUserId"/>

    </resultMap>

    <resultMap id="courseResponse" type="com.mdd.ela.dto.course.CourseResponse">
        <result column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="author_account_id" property="authorAccountId"/>
        <result column="description" property="description"/>
        <result column="avatar_url" property="avatarUrl"/>
        <result column="root_price" property="rootPrice"/>
        <result column="full_name" property="authorName"/>
        <result column="num_of_lesson" property="numOfLesson"/>
        <result column="active" property="active"/>
        <result column="type" property="type"/>
        <result column="category_id" property="categoryId"/>
        <result column="category_name" property="categoryName"/>
        <result column="author_name" property="authorName"/>
        <result column="rating_avg" property="ratingAvg"/>




        <result column="create_time" property="createTime"/>
        <result column="create_user_id" property="createUserId"/>
        <result column="modify_time" property="modifyTime"/>
        <result column="modify_user_id" property="modifyUserId"/>
    </resultMap>


    <resultMap id="comboBoxResponse" type="com.mdd.ela.dto.base.ComboBoxResponse">
        <result column="id" property="id"/>
        <result column="title" property="title"/>
    </resultMap>

    <sql id="filter">
        <if test="searchingValue != null and searchingValue != ''">
            and (upper(c.title) like upper(concat('%',#{searchingValue},'%')))
        </if>
        <if test="rootPrice != null and rootPrice != 0">
            and (c.root_price between #{priceFrom} and #{priceTo})
        </if>
        <if test="categoryId != null and categoryId != 0">
            and c.category_id = #{categoryId}
        </if>
        <if test="authorAccountId != null and authorAccountId != 0">
            and c.author_account_id = #{authAccountId}
        </if>
    </sql>

    <sql id="categoryTable">
        (select c1.id, c1.code, c1.description from code c1 join code c2 on c1.p_id = c2.id where c2.code = 'CATEGORY')
    </sql>

    <select id="getAll" resultMap = "courseResponse">
        select c.*, a.full_name as author_name, tmp1.num_of_lesson as num_of_lesson, tmp.description as category_name,
        tmp1.total_time as total_time, tmp2.average_rating as rating_avg
        from course c
        left join account a on c.author_account_id = a.id
        left join <include refid="categoryTable"></include> tmp on c.category_id = tmp.id
        left join (
        select count(l.id) as num_of_lesson, sum(ls.duration) as total_time, c.id from lesson l
        left join lesson_video ls on l.id = ls.lesson_id
        join chapter ct on l.chapter_id = ct.id
        join course c on ct.course_id = c.id
        group by c.id) tmp1 on c.id = tmp1.id
        left join (select course_id, avg(rating) as average_rating  from `rating` group by course_id) tmp2 on c.id = tmp2.course_id
        where true
        <include refid="filter"></include>
        order by c.id desc
        limit #{limit}
        offset #{offset}
    </select>


    <select id="getPopularCourse" resultMap = "courseResponse">
        select c.*, a.full_name as author_name, tmp1.num_of_lesson as num_of_lesson, tmp.description as category_name,
        tmp1.total_time as total_time, tmp3.average_rating as rating_avg
        from course c
        left join account a on c.author_account_id = a.id
        left join <include refid="categoryTable"></include> tmp on c.category_id = tmp.id
        left join (
        select count(l.id) as num_of_lesson, sum(ls.duration) as total_time, c.id from lesson l
        left join lesson_video ls on l.id = ls.lesson_id
        join chapter ct on l.chapter_id = ct.id
        join course c on ct.course_id = c.id
        group by c.id) tmp1 on c.id = tmp1.id
        left join (select course_id, count(id)/2 as num_of_sell  from transaction group by course_id) tmp2 on c.id = tmp2.course_id
        left join (select course_id, avg(rating) as average_rating  from `rating` group by course_id) tmp3 on c.id = tmp3.course_id
        where true
        order by tmp2.num_of_sell desc
        limit 10
        offset 1
    </select>

    <select id="getQualityCourse" resultMap = "courseResponse">
        select c.*, a.full_name as author_name, tmp1.num_of_lesson as num_of_lesson, tmp.description as category_name,
        tmp1.total_time as total_time, tmp2.average_rating as rating_avg
        from course c
        left join account a on c.author_account_id = a.id
        left join <include refid="categoryTable"></include> tmp on c.category_id = tmp.id
        left join (
        select count(l.id) as num_of_lesson, sum(ls.duration) as total_time, c.id from lesson l
        left join lesson_video ls on l.id = ls.lesson_id
        join chapter ct on l.chapter_id = ct.id
        join course c on ct.course_id = c.id
        group by c.id) tmp1 on c.id = tmp1.id
        left join (select course_id, avg(rating) as average_rating  from `rating` group by course_id) tmp2 on c.id = tmp2.course_id
        where true
        order by tmp2.average_rating desc
        limit 10
        offset 1
    </select>

    <select id="getCount" resultType="int">
        select count(distinct c.id)
        from course c
        left join account a on c.author_account_id = a.id
        left join <include refid="categoryTable"></include> ct on c.category_id = ct.id
        where true
        <include refid="filter"></include>
        limit #{limit}
        offset #{offset}
    </select>

    <select id="getDetail" resultMap="courseResponse">
        select c.*,a.full_name,ct.description as category_name
        from course c
        left join account a on c.author_account_id = a.id
        left join <include refid="categoryTable"></include> ct on c.category_id = ct.id
        where c.id = #{id}
    </select>

    <insert id="create" useGeneratedKeys="true" keyProperty="id">
        insert into course(
        title
        , author_account_id
        , description
        , avatar_url
        , root_price
        , active
        , type
        , category_id
        , create_time
        , create_user_id)
        values (
        #{title},
        #{authorAccountId},
        #{description},
        #{avatarUrl},
        #{rootPrice},
        #{active},
        #{type},
        #{categoryId},
        now(),
        #{authorAccountId})
    </insert>


    <update id="update">
        update course
        set
        title = #{title}
        ,   description = #{description}
        <if test="avatarUrl != null">
            , avatar_url = #{avatarUrl}
        </if>
        ,   root_price = #{rootPrice}
        ,   active = #{active}
        ,   type = #{type}
        ,   category_id = #{categoryId}
        ,   modify_time = now()
        ,   modify_user_id = #{modifyUserId}
        where id = #{id}
    </update>


    <delete id="delete">
        delete from course
        where id = #{id}
    </delete>


    <select id="getAllForComboBox" resultMap = "comboBoxResponse">
        select c.id, c.title
        from course c
        left join account a on c.author_account_id = a.id
        where true
        and a.id = #{id}
        order by c.id desc
    </select>

    <insert id="buyCourse">
        insert into transaction(
            code,
            account_id,
            course_id,
            payment_method,
            money,
            status,
            create_time,
            create_user_id)
        values (
            'test',
            #{accountId},
            #{courseId},
            1,
            #{money},
            1,
            now(),
            #{createUserId}
        )
    </insert>

    <insert id="ratingCourse">
        insert into rating(
        account_id,
        course_id,
        rating,
        content,
        create_time)
        values (
        #{createUserId},
        #{courseId},
        #{rating},
        #{content},
        now()
        )
    </insert>
</mapper>